
# Области видимости и пространства имён. 

"""
Давайте рассмотрим как можно использовать ключевое слово global с функциями на этом примере:

Условие: Дана глобальная переменная counter. Напишите функцию-счетчик, которая при каждом вызове увеличивает переменную counter на единицу.
 
counter = 0
def increment():
    . . .
 
increment()
print(counter)
# 1
 
increment()
print(counter)
# 2
 
increment()
print(counter)
# 3
 
 
Для начала задаем нашу глобальную переменную counter со значением 0:
 
counter = 0
 
Теперь напишем нашу функцию, назовем ее increment, функция не принимает никаких аргументов поэтому оставляем скобки пустыми:
 
counter = 0
 
def increment():
 
внутри функции попробуем увеличить глобальную переменную counter на единицу, т.е переопредилим counter = counter + 1, к первоначальному значению counter добавляем один:
 
counter = 0
 
def increment():
 
     counter = counter + 1
 
 
Попробуем вызвать счетчик несколько раз:
 
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)
 
Получаем ошибку:
 
UnboundLocalError: local variable 'counter' referenced before assignment
 
Что нам говорит данная ошибка? Python сообщает что мы попытались использовать переменную counter(правая часть "counter + 1") до ее объявления (левая часть "counter = "). Т.е в данном случае Python думает что мы работаем с новой локальной переменной counter. Так как проблема тут в том что переменная counter еще не создана, попробуем создать ее внутри функции со значением 0:
 
counter = 0
 
def increment():
    counter = 0
     counter = counter + 1
 
Вызываем счетчик несколько раз:
 
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)

Получаем в консоли:
 
глобальная переменная:  0
глобальная переменная:  0
глобальная переменная:  0
 
Ошибку мы не получили, но результат неверный. print распечатывает нам нашу глобальную переменную counter со значением 0. А локальная переменная counter внутри функции increment создается заново при каждом вызове. 

Для того чтобы добиться желаемого результата можем воспользоваться ключевым словом global, с помощью которого мы можем указать Python что хотим работать именно с глобальной переменной:
 
counter = 0
 
def increment():
    global counter
    counter = counter + 1
 
Теперь при вызове функции-счетчика несколько раз:
 
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)
# increment()
# print('глобальная переменная: ', counter)
 
 
 
Мы получим в консоли:
 
глобальная переменная:  1
глобальная переменная:  2
глобальная переменная:  3

"""




"""
1.
Дана вложенная функция:

def foo():
    var = 'переменная foo'

    def bar():
        var = 'переменная bar'

    bar()
    print("переменная в foo: ", var)

foo()
print("переменная в foo: ", var)

Внесите изменения в код таким образом чтобы
мы получали следующий результат в консоли:

переменная в foo:  переменная foo
переменная в foo:  переменная bar

"""
# 1.def foo():
#     var = 'переменная foo'
#     print('переменная в foo: ', var)
     
#     def bar():
#         global var
#         var = 'переменная bar'
        
#     bar()
# foo()
# print('переменная в foo: ', var)


# 2.def foo():
#     global var
#     var = 'переменная foo'

#     def bar():
#         global var
#         print(f'переменная в foo:  {var}')
#         var = 'переменная bar'

#     bar()
# foo()
# print("переменная в foo: ", var)


"""
2.

У вас есть глобальная переменная x со значением 'Я глобальная переменная!'. 
1.
Напишите функцию которая изменяет значение этой переменной на 'Я могу изменяться', 
т.е если вы после вызова функции распечатаете переменную x вне функции она должна возвращать
вам значение 'Я могу изменяться'. 
Также чтобы удостовериться что вы изменили именно глобальную переменную выведите c помощью  print() в консоль словарь глобальных имен. 

"""

# писать код здесь


"""
3. 

Дана глобальная переменная num со значением 3.
Напишите функцию mul которая будет находить квадрат num( num * num ) и записывать результат
в глобальную переменную num. 

num = 3

def mul():
  . . .

mul()
print(num)
# 9, т.к 3 * 3 = 9

mul()
print(num)
# 81, т.к в num хранится предыдущее значение 9, а 9 * 9 = 81

"""

# num = 3
# def mul():
#     global num
#     num = pow(num, 2)
# mul()
# mul()
# mul()
# print(num


"""
4. 
Напишите небольшую программу для подсчета доходов и расходов. 

У вас есть глобальная переменная balance - общий баланс на счету. 
Программа должна состоять из трех функций:

get_salary(amount) - функция для 
увеличения баланса, которая принимает в аргументы amount - число и увеличивает 
переменную balance на число переданное в amount. 

pay_bills(amount, log_name) - уменьшает баланс на количество amount,
в параметр log_name - принимает строку - на что были потрачены деньги и распечатывает 
результат, например если мы вызвали pay_bills(300, 'интернет') 
функция распечатывает строку в виде:
"Вы заплатили 300 сом за интернет"

И функция get_balance(), которая будет распечатывать вам строку:

У вас на счету n сом
где n - это текущее значение глобальной переменной balance. 

Пример:

get_salary(1000)
get_balance()
pay_bills(400, 'кабельное тв')
get_balance()

Результат в консоли:

У вас на счету 1000 сом
Вы заплатили 400 сом за кабельное тв
У вас на счету 600 сом
"""

# balance = 0
# def get_salary(amount):
#     global balance
#     balance += amount
# def pay_bills(amount, log_name):
#     global balance
#     balance -= amount
#     print(f'Вы заплатили {amount} сом за {log_name}')
# def get_balance():
#     print(f'У вас на счету {balance} сом')
# get_salary(1000)
# get_balance()
# pay_bills(400, 'кабельное тв')
# get_balance()


"""
5. 
В Python есть встроенная арифметическая функция pow(). pow принимает два обязательных
аргумента x, y и один необязательный z и возвращает результат в виде x ** y % z 
- возводит первое число в степень y и если передано третье число, 
делит результат на третье число и возвращает остаток. 

Например:

print(pow(2,3))

# 8 - т.к 2 ** 3 = 8

print(pow(2, 3, 3))

# 2 - т.к 2 ** 3 = 8, а остаток от деления 8 % 3 = 2

Напишите функции pow_first(x,y), отвечает за первую часть встроенной
функции pow и pow_second(z), отвечает за вторую часть pow(z). Результат сохраняйте в глобальной перменной result. 

result = 0

def pow_first(x, y):
    . . . 
 
def pow_second(z):
    . . .

"""

# result = 0

# def pow_first(x, y):
#     global result
#     result = x**y

# def pow_second(z):
#     global result
#     result = result % z

# pow_first(2, 3)
# pow_second(3)

# print(result)


"""
6. Мурат с друзьями на выходных решил собраться и пойти в ночной клуб.
Но в ночной клуб пропускают только тех, кому 17+.
Мурату - 24 года, Эржану - 21 год, Чынгызу - 24 года, Алтынай - 17 лет, Асеме - 16.
Напишите программу которая определяет кого пустить в ночной клуб, а кого нет.
"""

# a = {'Мурат': 24, 'Эржан': 21, 'Чынгыз': 24, 'Алтынай': 17, 'Асема': 16}
# def age_control():
#     global a
#     for name, age in a.items():
#         if age < 17:
#             print(f"{name}, извините, Вы не проходите по age-control")
#         else:
#             print(f"{name}, Вы можете войти в клуб")
# age_control()



"""
7. Вам дан список из нескольких имён в нижнем регистре. Напишите функцию которая записывает первую букву имени в верхнем регистре и сохраняет результат в новом списке.
"""

1.a = ['pipi', 'papa', 'mama']
# b = []
# i = 0
# while i < len(a):
#     b.append(a[i].capitalize())
#     i += 1
# print(b)

# 2.a = ['pipi', 'papa', 'mama']
# b = list()
# def title_in_list():
#     global a
#     global b
#     for string in a:
#         string = string.title()
#         b.append(string)
#     print(b)
# title_in_list()




"""
8. Напишите функцию, которая принимает строку и выводит количество гласных, согласных букв и остальных символов. Используйте только кириллические символы
"""
# def count_symbols(str_):
#     vowels = 0
#     consonants = 0
#     symbols = 0
    
#     for l in str_.lower():
#         if l in "йуеыаоэяиюё":
#             vowels += 1 
#         elif l in "цкнгшщзмчвфжрлдтсп":
#             consonants += 1
#         else:
#             symbols += 1
#     return f'Количество гласных: {vowels}, согласных: {consonants}, остальных символов: {symbols}'

# print(count_symbols('Мурат супер!'))

"""
9. Создайте пустой список. Напишите программу которая должна 
записывать в Ваш список числа от 0 до 10 включительно.
"""

# 1.a = list()
# def append_to_list():
#     global a
#     a = list(range(11))
#     print(a)
# append_to_list

# 2.a = []
# for x in range(11):
#     a.append(x)
# print(a)

"""
10. Вам дан список целых чисел. Напишите программу
которая выводит все элементы, которые меньше 7.
"""

# 1.a = [1, 3, 4, 6, 8, 6, 8, 9, 0, 3]
# b = [num for num in a if num < 7]
# for num in b:
#     print(num, end='\t')

# 2.a= [1, 3, 4, 6, 8, 6, 8, 9, 0, 3]
# def func2():
#     for num in a:
#         if num < 7:
#             print(num,end='\t')

# func2()

